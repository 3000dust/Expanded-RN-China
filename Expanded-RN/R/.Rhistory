for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
} else {
ninja_aggregate_china = function(generator_list, from, to, technology){
Latitude_list = generator_list$Latitude
Longitude_list = generator_list$Longitude
time_limit = ymd('2020-12-31')
date_gap = as.numeric(ymd(to) - ymd(from))
result_UTC = data.frame(matrix(NA, nrow = 24 * date_gap, ncol = nrow(generator_list)))
#lat = as.numeric(province_list[province_list$Provinces == province,][,2])
#lon = as.numeric(province_list[province_list$Provinces == province,][,3])
if ((from <= time_limit) & (to <= time_limit)){
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
result_UTC
} else {
### if the time input to function is beyond 2020-12-31, use the corresponding date in 2020 to simulate the profile
a = unlist(strsplit(from, split = '-'))
b = unlist(strsplit(to, split = '-'))
simulate_year = a[1]
a[1] = 2020
b[1] = 2020
From = paste(a, collapse = '-')
To = paste(b, collapse = '-')
if (technology == 'wind'){
result_UTC = ninja_get_china_wind(lat, lon, From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')
} else if (technology == 'solar'){
result_UTC = ninja_get_china_solar(lat, lon, From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')
} else {
print('Sorry, no such profile exists')
}
result_UTC[2] = result_UTC[2]*(1+innovation_rate)**(as.numeric(simulate_year) - 2020)
## Change the time shown in the data frame
New_time = paste(result_UTC[,1],sep=" ", collapse=NULL)
New_time = sub('2020', simulate_year, New_time)
result_UTC[1] = New_time
result_UTC
}
}
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2020-01-01', '2020-01-02', 'wind')
ninja_aggregate_china = function(generator_list, from, to, technology){
Latitude_list = generator_list$Latitude
Longitude_list = generator_list$Longitude
time_limit = ymd('2020-12-31')
date_gap = as.numeric(ymd(to) - ymd(from))
result_UTC = data.frame(matrix(NA, nrow = 24 * (date_gap + 1), ncol = nrow(generator_list)))
#lat = as.numeric(province_list[province_list$Provinces == province,][,2])
#lon = as.numeric(province_list[province_list$Provinces == province,][,3])
if ((from <= time_limit) & (to <= time_limit)){
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
result_UTC
} else {
### if the time input to function is beyond 2020-12-31, use the corresponding date in 2020 to simulate the profile
a = unlist(strsplit(from, split = '-'))
b = unlist(strsplit(to, split = '-'))
simulate_year = a[1]
a[1] = 2020
b[1] = 2020
From = paste(a, collapse = '-')
To = paste(b, collapse = '-')
if (technology == 'wind'){
result_UTC = ninja_get_china_wind(lat, lon, From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')
} else if (technology == 'solar'){
result_UTC = ninja_get_china_solar(lat, lon, From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')
} else {
print('Sorry, no such profile exists')
}
result_UTC[2] = result_UTC[2]*(1+innovation_rate)**(as.numeric(simulate_year) - 2020)
## Change the time shown in the data frame
New_time = paste(result_UTC[,1],sep=" ", collapse=NULL)
New_time = sub('2020', simulate_year, New_time)
result_UTC[1] = New_time
result_UTC
}
}
ninja_aggregate_china(farms, '2020-01-01', '2020-01-02', 'wind')
ninja_aggregate_china(farms, '2020-01-01', '2020-01-01', 'solar')
ninja_aggregate_china = function(generator_list, from, to, technology, innovation_rate = 0.02){
Latitude_list = generator_list$Latitude
Longitude_list = generator_list$Longitude
time_limit = ymd('2020-12-31')
date_gap = as.numeric(ymd(to) - ymd(from))
result_UTC = data.frame(matrix(NA, nrow = 24 * (date_gap + 1), ncol = nrow(generator_list)))
#lat = as.numeric(province_list[province_list$Provinces == province,][,2])
#lon = as.numeric(province_list[province_list$Provinces == province,][,3])
if ((from <= time_limit) & (to <= time_limit)){
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
result_UTC
} else {
### if the time input to function is beyond 2020-12-31, use the corresponding date in 2020 to simulate the profile
a = unlist(strsplit(from, split = '-'))
b = unlist(strsplit(to, split = '-'))
simulate_year = a[1]
a[1] = 2020
b[1] = 2020
From = paste(a, collapse = '-')
To = paste(b, collapse = '-')
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
for (column in 2:ncol(result_UTC)){
result_UTC[column] = result_UTC[column]*(1+innovation_rate)**(as.numeric(simulate_year) - 2020)
}
## Change the time shown in the data frame
New_time = paste(result_UTC[,1],sep=" ", collapse=NULL)
New_time = sub('2020', simulate_year, New_time)
result_UTC[1] = New_time
result_UTC
}
}
ninja_aggregate_china(farms, '2022-01-01', '2022-01-01', 'solar')
ninja_aggregate_china = function(generator_list, from, to, technology, innovation_rate = 0.02){
Latitude_list = generator_list$Latitude
Longitude_list = generator_list$Longitude
time_limit = ymd('2020-12-31')
date_gap = as.numeric(ymd(to) - ymd(from))
result_UTC = data.frame(matrix(NA, nrow = 24 * (date_gap + 1), ncol = nrow(generator_list)))
#lat = as.numeric(province_list[province_list$Provinces == province,][,2])
#lon = as.numeric(province_list[province_list$Provinces == province,][,3])
if ((from <= time_limit) & (to <= time_limit)){
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
result_UTC
} else {
### if the time input to function is beyond 2020-12-31, use the corresponding date in 2020 to simulate the profile
a = unlist(strsplit(from, split = '-'))
b = unlist(strsplit(to, split = '-'))
simulate_year = a[1]
a[1] = 2020
b[1] = 2020
From = paste(a, collapse = '-')
To = paste(b, collapse = '-')
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
for (column in 2:ncol(result_UTC)){
result_UTC[column] = result_UTC[column]*(1+innovation_rate)**(as.numeric(simulate_year) - 2020)
}
## Change the time shown in the data frame
New_time = paste(result_UTC[,1],sep=" ", collapse=NULL)
New_time = sub('2020', simulate_year, New_time)
result_UTC[1] = New_time
result_UTC
}
}
ninja_aggregate_china(farms, '2022-01-01', '2022-01-01', 'solar')
# insert your API authorisation token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-01', 'solar')
ninja_aggregate_china(farms, '2022-01-01', '2022-01-05', 'solar')
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
source(file.path(Dir_path, 'R/ninja_automator.r'))
source(file.path(Dir_path, 'R/Renewables_Ninja_China.r'))
# insert your API authorisation token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
farms
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
# insert your API authorisation token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
farms
names(farms)
names(farms[,1])
names(farms[1])
ninja_aggregate_china = function(generator_list, from, to, technology, innovation_rate = 0.02){
Latitude_list = generator_list$Latitude
Longitude_list = generator_list$Longitude
time_limit = ymd('2020-12-31')
date_gap = as.numeric(ymd(to) - ymd(from))
result_UTC = data.frame(matrix(NA, nrow = 24 * (date_gap + 1), ncol = nrow(generator_list)))
#lat = as.numeric(province_list[province_list$Provinces == province,][,2])
#lon = as.numeric(province_list[province_list$Provinces == province,][,3])
if ((from <= time_limit) & (to <= time_limit)){
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
colnames = paste('Generator', 1:nrow(generator_list), sep = '_')
names(result_UTC[1]) = 'time'
names(result_UTC[2:nrow(result_UTC)] = colnames)
names(result_UTC[2:nrow(result_UTC)]) = colnames
ninja_aggregate_china = function(generator_list, from, to, technology, innovation_rate = 0.02){
Latitude_list = generator_list$Latitude
Longitude_list = generator_list$Longitude
time_limit = ymd('2020-12-31')
date_gap = as.numeric(ymd(to) - ymd(from))
result_UTC = data.frame(matrix(NA, nrow = 24 * (date_gap + 1), ncol = nrow(generator_list)))
#lat = as.numeric(province_list[province_list$Provinces == province,][,2])
#lon = as.numeric(province_list[province_list$Provinces == province,][,3])
if ((from <= time_limit) & (to <= time_limit)){
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
colnames = paste('Generator', 1:nrow(generator_list), sep = '_')
names(result_UTC[1]) = 'time'
names(result_UTC[2:nrow(result_UTC)]) = colnames
result_UTC
} else {
### if the time input to function is beyond 2020-12-31, use the corresponding date in 2020 to simulate the profile
a = unlist(strsplit(from, split = '-'))
b = unlist(strsplit(to, split = '-'))
simulate_year = a[1]
a[1] = 2020
b[1] = 2020
From = paste(a, collapse = '-')
To = paste(b, collapse = '-')
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
for (column in 2:ncol(result_UTC)){
result_UTC[column] = result_UTC[column]*(1+innovation_rate)**(as.numeric(simulate_year) - 2020)
}
## Change the time shown in the data frame
New_time = paste(result_UTC[,1],sep=" ", collapse=NULL)
New_time = sub('2020', simulate_year, New_time)
result_UTC[1] = New_time
colnames = paste('Generator', 1:nrow(generator_list), sep = '_')
names(result_UTC[1]) = 'time'
names(result_UTC[2:nrow(result_UTC)]) = colnames
result_UTC
}
}
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
ninja_aggregate_china = function(generator_list, from, to, technology, innovation_rate = 0.02){
Latitude_list = generator_list$Latitude
Longitude_list = generator_list$Longitude
time_limit = ymd('2020-12-31')
date_gap = as.numeric(ymd(to) - ymd(from))
result_UTC = data.frame(matrix(NA, nrow = 24 * (date_gap + 1), ncol = nrow(generator_list)))
#lat = as.numeric(province_list[province_list$Provinces == province,][,2])
#lon = as.numeric(province_list[province_list$Provinces == province,][,3])
if ((from <= time_limit) & (to <= time_limit)){
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
colnames = paste('Generator', 1:nrow(generator_list), sep = '_')
names(result_UTC[1]) = 'time'
names(result_UTC[2:ncol(result_UTC)]) = colnames
result_UTC
} else {
### if the time input to function is beyond 2020-12-31, use the corresponding date in 2020 to simulate the profile
a = unlist(strsplit(from, split = '-'))
b = unlist(strsplit(to, split = '-'))
simulate_year = a[1]
a[1] = 2020
b[1] = 2020
From = paste(a, collapse = '-')
To = paste(b, collapse = '-')
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
for (column in 2:ncol(result_UTC)){
result_UTC[column] = result_UTC[column]*(1+innovation_rate)**(as.numeric(simulate_year) - 2020)
}
## Change the time shown in the data frame
New_time = paste(result_UTC[,1],sep=" ", collapse=NULL)
New_time = sub('2020', simulate_year, New_time)
result_UTC[1] = New_time
colnames = paste('Generator', 1:nrow(generator_list), sep = '_')
names(result_UTC[1]) = 'time'
names(result_UTC[2:ncol(result_UTC)]) = colnames
result_UTC
}
}
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
# pre-requisite packages
library(here)
library(curl)
library(lubridate)
here()
Dir_path <- file.path(here())
source(file.path(Dir_path, 'R/ninja_automator.r'))
source(file.path(Dir_path, 'R/Renewables_Ninja_China.r'))
# insert your API authorisation token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
farms
source(file.path(Dir_path, 'R/Renewables_Ninja_China.r'))
# insert your API authorisation token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
## Note that RN can only generate the profile before 2021-01-01, please use the time
# Function input: province, from, to, technology
ninja_get_china_capacity_factor('Liaoning', '2021-01-01', '2021-01-05', 'wind')
# ninja_get_china_capacity_factor(province = 'Tianjin', from ='2020-01-01', to ='2020-02-01', technology = 'wind')
ninja_plot_china_capacity_factor('Shanghai', '2023-01-01', '2023-01-05', 'solar')
# ninja_get_china_capacity_factor(province = 'Tianjin', from ='2020-01-01', to ='2020-02-01', technology = 'wind')
ninja_plot_china_capacity_factor('Jilin', '2023-01-01', '2023-02-05', 'solar')
# ninja_get_china_capacity_factor(province = 'Tianjin', from ='2020-01-01', to ='2020-02-01', technology = 'wind')
ninja_plot_china_capacity_factor('Jilin', '2023-01-01', '2023-01-15', 'solar')
## Note that RN can only generate the profile before 2021-01-01, please use the time
# Function input: province, from, to, technology
ninja_get_china_capacity_factor('Liaoning', '2021-01-01', '2021-01-05', 'wind')

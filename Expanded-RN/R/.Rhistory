#lat = as.numeric(province_list[province_list$Provinces == province,][,2])
#lon = as.numeric(province_list[province_list$Provinces == province,][,3])
if ((from <= time_limit) & (to <= time_limit)){
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
result_UTC
} else {
### if the time input to function is beyond 2020-12-31, use the corresponding date in 2020 to simulate the profile
a = unlist(strsplit(from, split = '-'))
b = unlist(strsplit(to, split = '-'))
simulate_year = a[1]
a[1] = 2020
b[1] = 2020
From = paste(a, collapse = '-')
To = paste(b, collapse = '-')
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
for (column in 2:ncol(result_UTC)){
result_UTC[column] = result_UTC[column]*(1+innovation_rate)**(as.numeric(simulate_year) - 2020)
}
## Change the time shown in the data frame
New_time = paste(result_UTC[,1],sep=" ", collapse=NULL)
New_time = sub('2020', simulate_year, New_time)
result_UTC[1] = New_time
result_UTC
}
}
ninja_aggregate_china(farms, '2022-01-01', '2022-01-01', 'solar')
# insert your API authorisation token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-01', 'solar')
ninja_aggregate_china(farms, '2022-01-01', '2022-01-05', 'solar')
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
source(file.path(Dir_path, 'R/ninja_automator.r'))
source(file.path(Dir_path, 'R/Renewables_Ninja_China.r'))
# insert your API authorisation token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
farms
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
# insert your API authorisation token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
farms
names(farms)
names(farms[,1])
names(farms[1])
ninja_aggregate_china = function(generator_list, from, to, technology, innovation_rate = 0.02){
Latitude_list = generator_list$Latitude
Longitude_list = generator_list$Longitude
time_limit = ymd('2020-12-31')
date_gap = as.numeric(ymd(to) - ymd(from))
result_UTC = data.frame(matrix(NA, nrow = 24 * (date_gap + 1), ncol = nrow(generator_list)))
#lat = as.numeric(province_list[province_list$Provinces == province,][,2])
#lon = as.numeric(province_list[province_list$Provinces == province,][,3])
if ((from <= time_limit) & (to <= time_limit)){
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
colnames = paste('Generator', 1:nrow(generator_list), sep = '_')
names(result_UTC[1]) = 'time'
names(result_UTC[2:nrow(result_UTC)] = colnames)
names(result_UTC[2:nrow(result_UTC)]) = colnames
ninja_aggregate_china = function(generator_list, from, to, technology, innovation_rate = 0.02){
Latitude_list = generator_list$Latitude
Longitude_list = generator_list$Longitude
time_limit = ymd('2020-12-31')
date_gap = as.numeric(ymd(to) - ymd(from))
result_UTC = data.frame(matrix(NA, nrow = 24 * (date_gap + 1), ncol = nrow(generator_list)))
#lat = as.numeric(province_list[province_list$Provinces == province,][,2])
#lon = as.numeric(province_list[province_list$Provinces == province,][,3])
if ((from <= time_limit) & (to <= time_limit)){
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
colnames = paste('Generator', 1:nrow(generator_list), sep = '_')
names(result_UTC[1]) = 'time'
names(result_UTC[2:nrow(result_UTC)]) = colnames
result_UTC
} else {
### if the time input to function is beyond 2020-12-31, use the corresponding date in 2020 to simulate the profile
a = unlist(strsplit(from, split = '-'))
b = unlist(strsplit(to, split = '-'))
simulate_year = a[1]
a[1] = 2020
b[1] = 2020
From = paste(a, collapse = '-')
To = paste(b, collapse = '-')
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
for (column in 2:ncol(result_UTC)){
result_UTC[column] = result_UTC[column]*(1+innovation_rate)**(as.numeric(simulate_year) - 2020)
}
## Change the time shown in the data frame
New_time = paste(result_UTC[,1],sep=" ", collapse=NULL)
New_time = sub('2020', simulate_year, New_time)
result_UTC[1] = New_time
colnames = paste('Generator', 1:nrow(generator_list), sep = '_')
names(result_UTC[1]) = 'time'
names(result_UTC[2:nrow(result_UTC)]) = colnames
result_UTC
}
}
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
ninja_aggregate_china = function(generator_list, from, to, technology, innovation_rate = 0.02){
Latitude_list = generator_list$Latitude
Longitude_list = generator_list$Longitude
time_limit = ymd('2020-12-31')
date_gap = as.numeric(ymd(to) - ymd(from))
result_UTC = data.frame(matrix(NA, nrow = 24 * (date_gap + 1), ncol = nrow(generator_list)))
#lat = as.numeric(province_list[province_list$Provinces == province,][,2])
#lon = as.numeric(province_list[province_list$Provinces == province,][,3])
if ((from <= time_limit) & (to <= time_limit)){
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], from, to, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
colnames = paste('Generator', 1:nrow(generator_list), sep = '_')
names(result_UTC[1]) = 'time'
names(result_UTC[2:ncol(result_UTC)]) = colnames
result_UTC
} else {
### if the time input to function is beyond 2020-12-31, use the corresponding date in 2020 to simulate the profile
a = unlist(strsplit(from, split = '-'))
b = unlist(strsplit(to, split = '-'))
simulate_year = a[1]
a[1] = 2020
b[1] = 2020
From = paste(a, collapse = '-')
To = paste(b, collapse = '-')
if (technology == 'wind'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_wind(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, height=80, turbine='Vestas+V90+2000', raw='false')[,2]
}
} else if (technology == 'solar'){
for (row in (1 : nrow(generator_list))){
result_UTC[,1] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,1]
result_UTC[,(row + 1)] = ninja_get_china_solar(lat = Latitude_list[row], lon = Longitude_list[row], From, To, dataset='merra2',
capacity=1, system_loss=0.1, tracking=0, tilt=35, azim=180, raw='false')[,2]
}
} else {
print('Sorry, no such profile exists')
}
for (column in 2:ncol(result_UTC)){
result_UTC[column] = result_UTC[column]*(1+innovation_rate)**(as.numeric(simulate_year) - 2020)
}
## Change the time shown in the data frame
New_time = paste(result_UTC[,1],sep=" ", collapse=NULL)
New_time = sub('2020', simulate_year, New_time)
result_UTC[1] = New_time
colnames = paste('Generator', 1:nrow(generator_list), sep = '_')
names(result_UTC[1]) = 'time'
names(result_UTC[2:ncol(result_UTC)]) = colnames
result_UTC
}
}
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
# pre-requisite packages
library(here)
library(curl)
library(lubridate)
here()
Dir_path <- file.path(here())
source(file.path(Dir_path, 'R/ninja_automator.r'))
source(file.path(Dir_path, 'R/Renewables_Ninja_China.r'))
# insert your API authorisation token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
farms
source(file.path(Dir_path, 'R/Renewables_Ninja_China.r'))
# insert your API authorisation token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorisation
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'R/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-02', 'wind')
## Note that RN can only generate the profile before 2021-01-01, please use the time
# Function input: province, from, to, technology
ninja_get_china_capacity_factor('Liaoning', '2021-01-01', '2021-01-05', 'wind')
# ninja_get_china_capacity_factor(province = 'Tianjin', from ='2020-01-01', to ='2020-02-01', technology = 'wind')
ninja_plot_china_capacity_factor('Shanghai', '2023-01-01', '2023-01-05', 'solar')
# ninja_get_china_capacity_factor(province = 'Tianjin', from ='2020-01-01', to ='2020-02-01', technology = 'wind')
ninja_plot_china_capacity_factor('Jilin', '2023-01-01', '2023-02-05', 'solar')
# ninja_get_china_capacity_factor(province = 'Tianjin', from ='2020-01-01', to ='2020-02-01', technology = 'wind')
ninja_plot_china_capacity_factor('Jilin', '2023-01-01', '2023-01-15', 'solar')
## Note that RN can only generate the profile before 2021-01-01, please use the time
# Function input: province, from, to, technology
ninja_get_china_capacity_factor('Liaoning', '2021-01-01', '2021-01-05', 'wind')
library(here)
here()
Dir_path <- file.path(here())
## Source the ninja automator and my built function for China
source(file.path(Dir_path, 'R/ninja_automator.r'))
## Source the ninja automator and my built function for China
source(file.path(Dir_path, 'Expended-RN/R/ninja_automator.r'))
## Source the ninja automator and my built function for China
source(file.path(Dir_path, 'Expanded-RN/R/ninja_automator.r'))
source(file.path(Dir_path, 'Expanded-RN/R/Renewables_Ninja_China.r'))
source(file.path(Dir_path, 'Expanded-RN/R/Renewables_Ninja_China.r'))
province_list <- read.csv('Expanded-RN/Provinces_LatLong.csv')
### Match provinces according to its latitude and longitude
### Geodata from: https://www.distancelatlong.com/distancecalculator/country/china
HERE()
### Match provinces according to its latitude and longitude
### Geodata from: https://www.distancelatlong.com/distancecalculator/country/china
here()
province_list <- read.csv(file.path(here(), 'Expanded-RN/Provinces_LatLong.csv'))
source(file.path(Dir_path, 'Expanded-RN/R/Renewables_Ninja_China.r'))
## Source the ninja automator and my built function for China
source(file.path(Dir_path, 'Expanded-RN/R/ninja_automator.r'))
# insert your API authorization token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorization
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'Expanded-RN/R/Sample_Data/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-01', 'wind')
library(here)
here()
Dir_path <- file.path(here())
## Source the ninja automator and my built function for China
source(file.path(Dir_path, 'Expanded-RN/R/ninja_automator.r'))
source(file.path(Dir_path, 'Expanded-RN/R/Renewables_Ninja_China.r'))
# insert your API authorization token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorization
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
## Let's start with a sample csv file selected from GEM wind data
farms = read.csv(file.path(Dir_path, 'Expanded-RN/R/Sample_Data/GEM_Liaoning_sample_wind.csv'))
ninja_aggregate_china(farms, '2022-01-01', '2022-01-01', 'wind')
## Note that RN can only generate the profile before 2021-01-01, please use the time
# Function input: province, from, to, technology
ninja_get_china_capacity_factor('Liaoning', '2021-01-01', '2021-01-05', 'wind')
# ninja_get_china_capacity_factor(province = 'Tianjin', from ='2020-01-01', to ='2020-02-01', technology = 'wind')
ninja_plot_china_capacity_factor('Jilin', '2023-01-01', '2023-01-15', 'solar')
province_list <- read.csv(file.path(here(), 'Expanded-RN/Provinces_LatLong.csv'))
###prerequisite packages
requiredPackages = c('dplyr','ggplot2','scales','cowplot','here','curl','lubridate')
for(packages in requiredPackages){
if(!require(packages, character.only = TRUE)) install.packages(packages)
library(packages, character.only = TRUE)
}##Install and library utilized R packages if not in dictionary
province_list <- read.csv(file.path(here(), 'Expanded-RN/Provinces_LatLong.csv'))
province_list[3, c('longitude_w')]
province_list
province_list[3, colnames(province_list) == c('longitude_w')]
province_list[colnames(province_list) == c('longitude_w')]
province_list[colnames(province_list) %in% c('longitude_w')]
province_list[, colnames(province_list) %in% c('longitude_w')]
province_list <- read.csv(file.path(here(), 'Expanded-RN/Provinces_LatLong.csv'))
province_list[, colnames(province_list) %in% c('longitude_w')]
province_list[, colnames(province_list) %in% c('longitude_s')]
province_list[, colnames(province_list) %in% c('Longitude_s')]
province_list[, colnames(province_list) == c('Longitude_s')]
province_list[3, colnames(province_list) == c('Longitude_s')]
technology <- c('wind')
province = c('Liaoning')
if (technology == 'wind') {
lat = as.numeric(province_list[province_list$Provinces == province,][,colnames(province_list) == c('Latitude_w')])
lon = as.numeric(province_list[province_list$Provinces == province,][,colnames(province_list) == c('Longitude_w')])
} else if (technology == 'solar') {
lat = as.numeric(province_list[province_list$Provinces == province,][,colnames(province_list) == c('Latitude_s')])
lon = as.numeric(province_list[province_list$Provinces == province,][,colnames(province_list) == c('Longitude_s')])
}
lat, lon
lat
lon
technology <- c('win')
province = c('Liaoning')
if (technology == 'wind') {
lat = as.numeric(province_list[province_list$Provinces == province,][,colnames(province_list) == c('Latitude_w')])
lon = as.numeric(province_list[province_list$Provinces == province,][,colnames(province_list) == c('Longitude_w')])
} else if (technology == 'solar') {
lat = as.numeric(province_list[province_list$Provinces == province,][,colnames(province_list) == c('Latitude_s')])
lon = as.numeric(province_list[province_list$Provinces == province,][,colnames(province_list) == c('Longitude_s')])
}
lat
technology <- c('solar')
province = c('Liaoning')
if (technology == 'wind') {
lat = as.numeric(province_list[province_list$Provinces == province,][,colnames(province_list) == c('Latitude_w')])
lon = as.numeric(province_list[province_list$Provinces == province,][,colnames(province_list) == c('Longitude_w')])
} else if (technology == 'solar') {
lat = as.numeric(province_list[province_list$Provinces == province,][,colnames(province_list) == c('Latitude_s')])
lon = as.numeric(province_list[province_list$Provinces == province,][,colnames(province_list) == c('Longitude_s')])
}
lat
lon
library(here)
here()
Dir_path <- file.path(here())
## Source the ninja automator and my built function for China
source(file.path(Dir_path, 'Expanded-RN/R/ninja_automator.r'))
source(file.path(Dir_path, 'Expanded-RN/R/Renewables_Ninja_China.r'))
# insert your API authorization token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorization
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
## Note that RN can only generate the profile before 2021-01-01, please use the time
# Function input: province, from, to, technology
ninja_get_china_capacity_factor('Liaoning', '2021-10-01', '2021-11-01', 'wind')
# ninja_get_china_capacity_factor(province = 'Tianjin', from ='2020-01-01', to ='2020-02-01', technology = 'wind')
ninja_plot_china_capacity_factor('Jilin', '2021-10-01', '2021-11-01', 'wind')
# ninja_get_china_capacity_factor(province = 'Tianjin', from ='2020-01-01', to ='2020-02-01', technology = 'wind')
ninja_plot_china_capacity_factor('Jilin', '2021-10-01', '2021-11-01', 'wind', innovation_rate = 0)
## Note that RN can only generate the profile before 2021-01-01, please use the time
# Function input: province, from, to, technology
ninja_get_china_capacity_factor('Jilin', '2021-10-01', '2021-11-01', 'wind', innovation_rate = 0)
z = ninja_get_china_capacity_factor('Jilin', '2021-10-01', '2021-11-01', 'wind', innovation_rate = 0)
mean(z$electricity)
z = ninja_get_china_capacity_factor('Jilin', '2021-10-01', '2021-11-01', 'solar', innovation_rate = 0)
mean(z$electricity)
z = ninja_get_china_capacity_factor('Inner Mongolia', '2021-10-01', '2021-11-01', 'solar', innovation_rate = 0)
mean(z$electricity)
z = ninja_get_china_capacity_factor('Inner Mongolia', '2021-10-01', '2021-11-01', 'wind', innovation_rate = 0)
mean(z$electricity)
z = ninja_get_china_capacity_factor('Liaoning', '2021-10-01', '2021-11-01', 'wind', innovation_rate = 0)
mean(z$electricity)
z = ninja_get_china_capacity_factor('Liaoning', '2021-10-01', '2021-11-01', 'solar', innovation_rate = 0)
mean(z$electricity)
library(here)
here()
Dir_path <- file.path(here())
## Source the ninja automator and my built function for China
source(file.path(Dir_path, 'Expanded-RN/R/ninja_automator.r'))
source(file.path(Dir_path, 'Expanded-RN/R/Renewables_Ninja_China.r'))
# insert your API authorization token here
token = '2a623b67d5ba8df8b78a9b97308c24e16a4c77e6'
# establish your authorization
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
## Note that RN can only generate the profile before 2021-01-01, please use the time
# Function input: province, from, to, technology
ninja_get_china_capacity_factor('Heilongjiang', '2022-12-01', '2022-12-31', 'wind', innovation_rate = 0)
HL_122022_WIND <- ninja_get_china_capacity_factor('Heilongjiang', '2022-12-01', '2022-12-31', 'wind', innovation_rate = 0)
IM_122022_WIND <- ninja_get_china_capacity_factor('Inner Mongolia', '2022-12-01', '2022-12-31', 'wind', innovation_rate = 0)
JL_122022_WIND <- ninja_get_china_capacity_factor('Jilin', '2022-12-01', '2022-12-31', 'wind', innovation_rate = 0)
HL_122022_WIND <- ninja_get_china_capacity_factor('Heilongjiang', '2022-12-01', '2022-12-31', 'wind', innovation_rate = 0) %>%
rename('HL_WIND' = 'electricity')
IM_122022_WIND <- ninja_get_china_capacity_factor('Inner Mongolia', '2022-12-01', '2022-12-31', 'wind', innovation_rate = 0) %>%
rename('IM_WIND' = 'electricity')
JL_122022_WIND <- ninja_get_china_capacity_factor('Jilin', '2022-12-01', '2022-12-31', 'wind', innovation_rate = 0) %>%
rename('JL_WIND' = 'electricity')
LN_122022_WIND <- ninja_get_china_capacity_factor('Liaoning', '2022-12-01', '2022-12-31', 'wind', innovation_rate = 0) %>%
rename('LN_WIND' = 'electricity')
HL_122022_SOLAR <- ninja_get_china_capacity_factor('Heilongjiang', '2022-12-01', '2022-12-31', 'solar', innovation_rate = 0) %>%
rename('HL_SOLAR' = 'electricity')
IM_122022_SOLAR <- ninja_get_china_capacity_factor('Inner Mongolia', '2022-12-01', '2022-12-31', 'solar', innovation_rate = 0) %>%
rename('IM_SOLAR' = 'electricity')
JL_122022_SOLAR <- ninja_get_china_capacity_factor('Jilin', '2022-12-01', '2022-12-31', 'solar', innovation_rate = 0) %>%
rename('JL_SOLAR' = 'electricity')
LN_122022_SOLAR <- ninja_get_china_capacity_factor('Liaoning', '2022-12-01', '2022-12-31', 'solar', innovation_rate = 0) %>%
rename('LN_SOLAR' = 'electricity')
LN_122022_SOLAR
output <- merge(HL_122022_WIND, IM_122022_WIND, JL_122022_WIND, LN_122022_WIND,
HL_122022_SOLAR, IM_122022_SOLAR, JL_122022_SOLAR, LN_122022_SOLAR)
output <- merge(HL_122022_WIND, IM_122022_WIND, JL_122022_WIND, LN_122022_WIND,
HL_122022_SOLAR, IM_122022_SOLAR, JL_122022_SOLAR, LN_122022_SOLAR,
by = time)
output <- merge(HL_122022_WIND, IM_122022_WIND, JL_122022_WIND, LN_122022_WIND,
HL_122022_SOLAR, IM_122022_SOLAR, JL_122022_SOLAR, LN_122022_SOLAR,
by = 'time')
output <- cbind(HL_122022_WIND, IM_122022_WIND, JL_122022_WIND, LN_122022_WIND,
HL_122022_SOLAR, IM_122022_SOLAR, JL_122022_SOLAR, LN_122022_SOLAR)
head(output)
output <- unique(output)
head(output)
write.csv(output, 'Dec_2022_RE_CF.csv')
write.csv(output, 'Dec_2022_RE_CF.csv',fileEncoding = "UTF-8", row.names = FALSE)
###prerequisite packages
requiredPackages = c('tidyverse','dplyr','writexl','xlsx','here','stringr', 'viridis', 'readxl')
for(packages in requiredPackages){
if(!require(packages, character.only = TRUE)) install.packages(packages)
library(packages, character.only = TRUE)
}##Install and library utilized R packages if not in dictionary
#########Part 2 Extract unit level coal generator data from GEM for unit commitment
#############Get unit level generator information and separate them into selfgen and cogen (CHP)
here()
